{
  "kernel_source": "\n#include <metal_stdlib>\nusing namespace metal;\n\n#define OPTIMIZE 1\n\n\nkernel void im2col_858c9514ade9c693815ef0f9e305c4163be5a260628a57c4e859aba9(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index_thread[[thread_position_in_threadgroup]],\n                          ushort index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 1\n#define SW_EQUAL_1 1\n#define C1_DIVIDABLE_BY_4 0\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)(data_buffer + meta_buffer[0]);\n    device float4 *col4 = (device float4 *)(data_buffer + meta_buffer[1]);\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = data_buffer + meta_buffer[0];\n    device float *col = data_buffer + meta_buffer[1];\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[10];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[11];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n            const int h2 = h1 + PH - kh;\n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n            const int h2 = (h1 + PH - kh) / SH;\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n                const int w2 = w1 + PW - kw;\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n                const int w2 = (w1 + PW - kw) / SW;\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_82723318500752c4d8b8a37251a0f3ed2d22f057bc57de350386037d(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 0\n#define K_DIVIDABLE_BY_8 0\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 1\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = (result0[0]>0?result0[0]:(exp(result0[0])-1));\n            result0[1] = (result0[1]>0?result0[1]:(exp(result0[1])-1));\n            result0[2] = (result0[2]>0?result0[2]:(exp(result0[2])-1));\n            result0[3] = (result0[3]>0?result0[3]:(exp(result0[3])-1));\n            result1[0] = (result1[0]>0?result1[0]:(exp(result1[0])-1));\n            result1[1] = (result1[1]>0?result1[1]:(exp(result1[1])-1));\n            result1[2] = (result1[2]>0?result1[2]:(exp(result1[2])-1));\n            result1[3] = (result1[3]>0?result1[3]:(exp(result1[3])-1));\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:(exp(result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2])-1))) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:(exp(result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2])-1))) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:(exp(result[m_sub * 2 + n_sub1][n_sub2])-1))) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:(exp(result[m_sub * 2 + n_sub1][n_sub2])-1))) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n\n\nkernel void axiswisescale_a85e6b4d2971660454c297bb92b02e2c4755aeafa1cb33a583e3828d(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n#define FLAG_D1_EQUAL_1 0\n#define FLAG_D3_EQUAL_1 1\n\n    const device float *X = data_buffer + meta_buffer[0];\n    const device float *S = data_buffer + meta_buffer[1];\n    device float *Y = data_buffer + meta_buffer[2];\n\n#if !OPTIMIZE || !FLAG_D1_EQUAL_1\n    const int D1 = meta_buffer[3];\n#endif\n\n    const int D2 = meta_buffer[4];\n\n#if !OPTIMIZE || !FLAG_D3_EQUAL_1\n    const int D3 = meta_buffer[5];\n#endif\n\n#if OPTIMIZE && FLAG_D3_EQUAL_1\n    #if OPTIMIZE && FLAG_D1_EQUAL_1\n        for (int gid = index; gid < D2; gid += num_threads) {\n            const int d2 = gid;\n    #else\n        for (int gid = index; gid < D1 * D2; gid += num_threads) {\n            const int d2 = gid % D2;\n    #endif\n\n#else\n\n    #if OPTIMIZE && FLAG_D1_EQUAL_1\n        for (int gid = index; gid < D2 * D3; gid += num_threads) {\n            const int d2 = gid / D3 % D2;\n\n    #else\n        for (int gid = index; gid < D1 * D2 * D3; gid += num_threads) {\n            const int d2 = gid / D3 % D2;\n    #endif\n\n#endif\n\n        float v = X[gid] * S[d2];\n\n        Y[gid] = v;\n    }\n\n#undef FLAG_D1_EQUAL_1\n#undef FLAG_D3_EQUAL_1\n}\n\n\nkernel void axiswisebias_9d13c2038dfa2384dc8582319b06143da5a92a809634116baddd0b6a(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n#define FLAG_D1_EQUAL_1 0\n#define FLAG_D3_EQUAL_1 1\n\n    const device float *X = data_buffer + meta_buffer[0];\n    const device float *B = data_buffer + meta_buffer[1];\n    device float *Y = data_buffer + meta_buffer[2];\n\n#if !OPTIMIZE || !FLAG_D1_EQUAL_1\n    const int D1 = meta_buffer[3];\n#endif\n\n    const int D2 = meta_buffer[4];\n\n#if !OPTIMIZE || !FLAG_D3_EQUAL_1\n    const int D3 = meta_buffer[5];\n#endif\n\n#if OPTIMIZE && FLAG_D3_EQUAL_1\n    #if OPTIMIZE && FLAG_D1_EQUAL_1\n        for (int gid = index; gid < D2; gid += num_threads) {\n            const int d2 = gid;\n    #else\n        for (int gid = index; gid < D1 * D2; gid += num_threads) {\n            const int d2 = gid % D2;\n    #endif\n\n#else\n\n    #if OPTIMIZE && FLAG_D1_EQUAL_1\n        for (int gid = index; gid < D2 * D3; gid += num_threads) {\n            const int d2 = gid / D3 % D2;\n    \n    #else\n        for (int gid = index; gid < D1 * D2 * D3; gid += num_threads) {\n            const int d2 = gid / D3 % D2;\n    #endif\n\n#endif\n\n        float v = X[gid] + B[d2];\n\n        Y[gid] = v;\n    }\n\n#undef FLAG_D1_EQUAL_1\n#undef FLAG_D3_EQUAL_1\n}\n\n\nkernel void im2col_b062ef1357dc50ca7053d06e2be286ae1360ef7fa6d45aad8b3dbdd1(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index_thread[[thread_position_in_threadgroup]],\n                          ushort index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 0\n#define SW_EQUAL_1 0\n#define C1_DIVIDABLE_BY_4 1\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)(data_buffer + meta_buffer[0]);\n    device float4 *col4 = (device float4 *)(data_buffer + meta_buffer[1]);\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = data_buffer + meta_buffer[0];\n    device float *col = data_buffer + meta_buffer[1];\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[10];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[11];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n            const int h2 = h1 + PH - kh;\n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n            const int h2 = (h1 + PH - kh) / SH;\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n                const int w2 = w1 + PW - kw;\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n                const int w2 = (w1 + PW - kw) / SW;\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_1598b4c215130d4712c4e5721fcbbe4059e14a0c471754f92dfb5bb1(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 1\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = (result0[0]>0?result0[0]:(exp(result0[0])-1));\n            result0[1] = (result0[1]>0?result0[1]:(exp(result0[1])-1));\n            result0[2] = (result0[2]>0?result0[2]:(exp(result0[2])-1));\n            result0[3] = (result0[3]>0?result0[3]:(exp(result0[3])-1));\n            result1[0] = (result1[0]>0?result1[0]:(exp(result1[0])-1));\n            result1[1] = (result1[1]>0?result1[1]:(exp(result1[1])-1));\n            result1[2] = (result1[2]>0?result1[2]:(exp(result1[2])-1));\n            result1[3] = (result1[3]>0?result1[3]:(exp(result1[3])-1));\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:(exp(result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2])-1))) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:(exp(result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2])-1))) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:(exp(result[m_sub * 2 + n_sub1][n_sub2])-1))) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:(exp(result[m_sub * 2 + n_sub1][n_sub2])-1))) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n\n\nkernel void im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index_thread[[thread_position_in_threadgroup]],\n                          ushort index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 1\n#define SW_EQUAL_1 1\n#define C1_DIVIDABLE_BY_4 1\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)(data_buffer + meta_buffer[0]);\n    device float4 *col4 = (device float4 *)(data_buffer + meta_buffer[1]);\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = data_buffer + meta_buffer[0];\n    device float *col = data_buffer + meta_buffer[1];\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[10];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[11];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n            const int h2 = h1 + PH - kh;\n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n            const int h2 = (h1 + PH - kh) / SH;\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n                const int w2 = w1 + PW - kw;\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n                const int w2 = (w1 + PW - kw) / SW;\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 1\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = (result0[0]>0?result0[0]:0);\n            result0[1] = (result0[1]>0?result0[1]:0);\n            result0[2] = (result0[2]>0?result0[2]:0);\n            result0[3] = (result0[3]>0?result0[3]:0);\n            result1[0] = (result1[0]>0?result1[0]:0);\n            result1[1] = (result1[1]>0?result1[1]:0);\n            result1[2] = (result1[2]>0?result1[2]:0);\n            result1[3] = (result1[3]>0?result1[3]:0);\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:0)) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:0)) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:0)) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:0)) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n\n\nkernel void sgemm_ed6d29d44fa8fca55fe3895ec9437cecf2e0d0705a7ec47017e9231d(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 1\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = result0[0];\n            result0[1] = result0[1];\n            result0[2] = result0[2];\n            result0[3] = result0[3];\n            result1[0] = result1[0];\n            result1[1] = result1[1];\n            result1[2] = result1[2];\n            result1[3] = result1[3];\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n\n\nkernel void elementwisesum_d103c33fe36b055af07167b66844c3ce8295a0e0e2af5431e4584285(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n#define N_DIVIDABLE_BY_4 1\n#define HAS_INLINE 1\n\n#if OPTIMIZE && N_DIVIDABLE_BY_4\n    #define T_VALUE float4\n#else\n    #define T_VALUE float\n#endif\n\n\n#if OPTIMIZE && N_DIVIDABLE_BY_4\n    const device float4 *X0 = (const device float4 *)(data_buffer + meta_buffer[0]);\n    const device float4 *X1 = (const device float4 *)(data_buffer + meta_buffer[1]);\n    device float4 *Y = (device float4 *)(data_buffer + meta_buffer[2]);\n    const int N = (meta_buffer[3]) >> 2;\n#else\n    const device float *X0 = data_buffer + meta_buffer[0];\n    const device float *X1 = data_buffer + meta_buffer[1];\n    device float *Y = data_buffer + meta_buffer[2];\n    const int N = meta_buffer[3];\n#endif\n  \n    for (int gid = index; gid < N; gid += num_threads) {\n\n        T_VALUE result = X0[gid] + X1[gid];\n\n#if OPTIMIZE && HAS_INLINE\n    #if OPTIMIZE && N_DIVIDABLE_BY_4\n            result[0] = result[0];\n            result[1] = result[1];\n            result[2] = result[2];\n            result[3] = result[3];\n    #else\n            result = result;\n    #endif\n#endif\n\n        Y[gid] = result;\n    }\n\n\n#undef N_DIVIDABLE_BY_4 \n#undef HAS_INLINE\n}\n\n\nkernel void sgemm_68d542a00349c94a278fb79d877d2de57d7ae5e77cc9f1b53176bc6b(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 0\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = result0[0];\n            result0[1] = result0[1];\n            result0[2] = result0[2];\n            result0[3] = result0[3];\n            result1[0] = result1[0];\n            result1[1] = result1[1];\n            result1[2] = result1[2];\n            result1[3] = result1[3];\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n\n\nkernel void col2im_48f303a069d52485ff00658a9cf2d255ab3375db983f34af4c39078a(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *col = data_buffer + meta_buffer[1];\n    device float *im = data_buffer + meta_buffer[0];\n\n    const int N = meta_buffer[2];\n    const int C1 = meta_buffer[5];\n    const int H1 = meta_buffer[6];\n    const int W1 = meta_buffer[7];\n    const int H2 = meta_buffer[3];\n    const int W2 = meta_buffer[4];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int SH = meta_buffer[10];\n    const int SW = meta_buffer[11];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n\n    for (int gid = index; gid < N*H1*W1*C1; gid += num_threads) {\n        const int c1 = gid % C1;\n        const int w1 = gid / C1 % W1;\n        const int h1 = gid / C1 / W1 % H1;\n        const int n  = gid / C1 / W1 / H1;\n\n        float sum = 0;\n        \n        for (int kh = 0; kh < KH; kh++) {\n            const int h2 = (h1 + PH - kh) / SH;\n            if ((h1 + PH - kh) % SH != 0 || h2 < 0 || h2 >= H2) continue;\n\n            for (int kw = 0; kw < KW; kw++) {\n                const int w2 = (w1 + PW - kw) / SW;\n                if ((w1 + PW - kw) % SW != 0 || w2 < 0 || w2 >= W2) continue;\n                \n                sum += col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1];\n            }\n        }\n        \n        im[gid] = sum; \n    }\n}\n\n\nkernel void elu_d50befd10e73034e2c519f5409642b1535ccb6cf3eee51a719516a5b(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = data_buffer + meta_buffer[0];\n    device float *Y = data_buffer + meta_buffer[1];\n\n    const int N = meta_buffer[2];\n  \n    for (int gid = index; gid < N; gid += num_threads) {\n        float result = X[gid];\n        result = result < 0.0 ? (exp(result)-1) : result;      \n\n        Y[gid] = result;\n    }\n}\n\n\nkernel void sgemm_3d43d6cb77156c84b5393d82404c97b289b5dc1b4635ac005dba254d(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 0\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 0\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = result0[0];\n            result0[1] = result0[1];\n            result0[2] = result0[2];\n            result0[3] = result0[3];\n            result1[0] = result1[0];\n            result1[1] = result1[1];\n            result1[2] = result1[2];\n            result1[3] = result1[3];\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n\n\nkernel void tanh_2fc55acf97d5cbd1c7457355d0aca6252f752841b2bd4afcd0f01c67(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = data_buffer + meta_buffer[0];\n    device float *Y = data_buffer + meta_buffer[1];\n\n    const int N = meta_buffer[2];\n  \n    for (int gid = index; gid < N; gid += num_threads) {\n        Y[gid] = tanh(X[gid]);\n    }\n}\n\n\nkernel void scalaraffine_f6626a64e91fbc3d7c09fc783dd77f72e19967f26ec2868af024248e(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = data_buffer + meta_buffer[0];\n    device float *Y = data_buffer + meta_buffer[1];\n\n    const float scale = *((const device float *)(& meta_buffer[3]));\n    const float bias = *((const device float *)(& meta_buffer[4]));\n    const int N = meta_buffer[2];\n\n    for (int gid = index; gid < N; gid += num_threads) {\n        float result = X[gid];\n        result = result * scale + bias;\n        \n        Y[gid] = result;\n    }\n}\n",
  "exec_infos": [
    {
      "entry_func_name": "im2col_858c9514ade9c693815ef0f9e305c4163be5a260628a57c4e859aba9",
      "threadgroups_per_grid": {
        "width": 30400,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        197,
        27,
        0,
        132,
        137,
        42,
        0,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        144,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        144,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        9,
        0,
        0,
        0,
        9,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_82723318500752c4d8b8a37251a0f3ed2d22f057bc57de350386037d",
      "threadgroups_per_grid": {
        "width": 432,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        137,
        42,
        0,
        0,
        128,
        27,
        0,
        132,
        9,
        29,
        0,
        192,
        196,
        27,
        0,
        0,
        108,
        0,
        0,
        32,
        0,
        0,
        0,
        243,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "axiswisescale_a85e6b4d2971660454c297bb92b02e2c4755aeafa1cb33a583e3828d",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        32,
        197,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        108,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "axiswisebias_9d13c2038dfa2384dc8582319b06143da5a92a809634116baddd0b6a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        64,
        197,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        108,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_b062ef1357dc50ca7053d06e2be286ae1360ef7fa6d45aad8b3dbdd1",
      "threadgroups_per_grid": {
        "width": 28324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        137,
        42,
        0,
        1,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        144,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        72,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_1598b4c215130d4712c4e5721fcbbe4059e14a0c471754f92dfb5bb1",
      "threadgroups_per_grid": {
        "width": 108,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        137,
        42,
        0,
        0,
        0,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        196,
        27,
        0,
        0,
        27,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "axiswisescale_a85e6b4d2971660454c297bb92b02e2c4755aeafa1cb33a583e3828d",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        128,
        196,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        27,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "axiswisebias_9d13c2038dfa2384dc8582319b06143da5a92a809634116baddd0b6a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        64,
        195,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        27,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_b062ef1357dc50ca7053d06e2be286ae1360ef7fa6d45aad8b3dbdd1",
      "threadgroups_per_grid": {
        "width": 7252,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        201,
        35,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        72,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_1598b4c215130d4712c4e5721fcbbe4059e14a0c471754f92dfb5bb1",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        201,
        35,
        0,
        0,
        128,
        24,
        0,
        132,
        9,
        29,
        0,
        64,
        194,
        27,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "axiswisescale_a85e6b4d2971660454c297bb92b02e2c4755aeafa1cb33a583e3828d",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        192,
        194,
        27,
        0,
        132,
        9,
        29,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "axiswisebias_9d13c2038dfa2384dc8582319b06143da5a92a809634116baddd0b6a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        64,
        189,
        27,
        0,
        132,
        9,
        29,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 1900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        105,
        32,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        105,
        32,
        0,
        0,
        64,
        2,
        0,
        132,
        201,
        62,
        0,
        192,
        190,
        27,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 1900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        201,
        62,
        0,
        132,
        105,
        32,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_ed6d29d44fa8fca55fe3895ec9437cecf2e0d0705a7ec47017e9231d",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        105,
        32,
        0,
        0,
        0,
        18,
        0,
        132,
        41,
        66,
        0,
        192,
        188,
        27,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_d103c33fe36b055af07167b66844c3ce8295a0e0e2af5431e4584285",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        41,
        66,
        0,
        132,
        9,
        29,
        0,
        132,
        41,
        66,
        0,
        0,
        96,
        3,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 1900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        41,
        66,
        0,
        132,
        9,
        29,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        0,
        64,
        11,
        0,
        132,
        201,
        62,
        0,
        192,
        193,
        27,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 1900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        201,
        62,
        0,
        132,
        105,
        32,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_ed6d29d44fa8fca55fe3895ec9437cecf2e0d0705a7ec47017e9231d",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        105,
        32,
        0,
        0,
        128,
        4,
        0,
        132,
        9,
        29,
        0,
        64,
        193,
        27,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_d103c33fe36b055af07167b66844c3ce8295a0e0e2af5431e4584285",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        41,
        66,
        0,
        132,
        9,
        29,
        0,
        0,
        96,
        3,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 1900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        105,
        32,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        105,
        32,
        0,
        0,
        0,
        9,
        0,
        132,
        201,
        62,
        0,
        192,
        191,
        27,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 1900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        201,
        62,
        0,
        132,
        105,
        32,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_ed6d29d44fa8fca55fe3895ec9437cecf2e0d0705a7ec47017e9231d",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        105,
        32,
        0,
        0,
        192,
        15,
        0,
        132,
        41,
        66,
        0,
        192,
        192,
        27,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_d103c33fe36b055af07167b66844c3ce8295a0e0e2af5431e4584285",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        41,
        66,
        0,
        132,
        9,
        29,
        0,
        132,
        41,
        66,
        0,
        0,
        96,
        3,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 1900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        41,
        66,
        0,
        132,
        9,
        29,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        0,
        0,
        0,
        0,
        132,
        201,
        62,
        0,
        64,
        192,
        27,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 1900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        201,
        62,
        0,
        132,
        105,
        32,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_ed6d29d44fa8fca55fe3895ec9437cecf2e0d0705a7ec47017e9231d",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        105,
        32,
        0,
        0,
        192,
        6,
        0,
        132,
        9,
        29,
        0,
        64,
        191,
        27,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_d103c33fe36b055af07167b66844c3ce8295a0e0e2af5431e4584285",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        41,
        66,
        0,
        132,
        9,
        29,
        0,
        0,
        96,
        3,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 1900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        105,
        32,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        105,
        32,
        0,
        0,
        128,
        13,
        0,
        132,
        41,
        66,
        0,
        192,
        189,
        27,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 1900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        41,
        66,
        0,
        132,
        201,
        35,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_ed6d29d44fa8fca55fe3895ec9437cecf2e0d0705a7ec47017e9231d",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        201,
        35,
        0,
        0,
        64,
        20,
        0,
        132,
        105,
        32,
        0,
        64,
        190,
        27,
        0,
        192,
        6,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_d103c33fe36b055af07167b66844c3ce8295a0e0e2af5431e4584285",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        105,
        32,
        0,
        132,
        9,
        29,
        0,
        132,
        105,
        32,
        0,
        0,
        96,
        3,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_68d542a00349c94a278fb79d877d2de57d7ae5e77cc9f1b53176bc6b",
      "threadgroups_per_grid": {
        "width": 27,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        105,
        32,
        0,
        0,
        128,
        22,
        0,
        132,
        201,
        35,
        0,
        0,
        0,
        0,
        0,
        192,
        6,
        0,
        0,
        0,
        4,
        0,
        0,
        128,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "col2im_48f303a069d52485ff00658a9cf2d255ab3375db983f34af4c39078a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        201,
        35,
        0,
        1,
        0,
        0,
        0,
        36,
        0,
        0,
        0,
        48,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        72,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "axiswisebias_9d13c2038dfa2384dc8582319b06143da5a92a809634116baddd0b6a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        128,
        195,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        27,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elu_d50befd10e73034e2c519f5409642b1535ccb6cf3eee51a719516a5b",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        9,
        29,
        0,
        0,
        192,
        6,
        0
      ]
    },
    {
      "entry_func_name": "axiswisescale_a85e6b4d2971660454c297bb92b02e2c4755aeafa1cb33a583e3828d",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        64,
        196,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        27,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "axiswisebias_9d13c2038dfa2384dc8582319b06143da5a92a809634116baddd0b6a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        192,
        195,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        27,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_68d542a00349c94a278fb79d877d2de57d7ae5e77cc9f1b53176bc6b",
      "threadgroups_per_grid": {
        "width": 108,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        0,
        128,
        26,
        0,
        132,
        137,
        42,
        0,
        0,
        0,
        0,
        0,
        0,
        27,
        0,
        0,
        0,
        2,
        0,
        0,
        64,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "col2im_48f303a069d52485ff00658a9cf2d255ab3375db983f34af4c39078a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        137,
        42,
        0,
        1,
        0,
        0,
        0,
        72,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        144,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "axiswisebias_9d13c2038dfa2384dc8582319b06143da5a92a809634116baddd0b6a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        96,
        197,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        108,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elu_d50befd10e73034e2c519f5409642b1535ccb6cf3eee51a719516a5b",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        9,
        29,
        0,
        0,
        128,
        13,
        0
      ]
    },
    {
      "entry_func_name": "axiswisescale_a85e6b4d2971660454c297bb92b02e2c4755aeafa1cb33a583e3828d",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        224,
        196,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        108,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "axiswisebias_9d13c2038dfa2384dc8582319b06143da5a92a809634116baddd0b6a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        0,
        197,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        108,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_3d43d6cb77156c84b5393d82404c97b289b5dc1b4635ac005dba254d",
      "threadgroups_per_grid": {
        "width": 432,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        96,
        158,
        27,
        0,
        132,
        137,
        42,
        0,
        0,
        0,
        0,
        0,
        0,
        108,
        0,
        0,
        243,
        0,
        0,
        0,
        32,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "col2im_48f303a069d52485ff00658a9cf2d255ab3375db983f34af4c39078a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        137,
        42,
        0,
        1,
        0,
        0,
        0,
        144,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        144,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        9,
        0,
        0,
        0,
        9,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "axiswisebias_9d13c2038dfa2384dc8582319b06143da5a92a809634116baddd0b6a",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        128,
        197,
        27,
        0,
        132,
        9,
        29,
        0,
        0,
        108,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "tanh_2fc55acf97d5cbd1c7457355d0aca6252f752841b2bd4afcd0f01c67",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        9,
        29,
        0,
        0,
        68,
        1,
        0
      ]
    },
    {
      "entry_func_name": "scalaraffine_f6626a64e91fbc3d7c09fc783dd77f72e19967f26ec2868af024248e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        132,
        9,
        29,
        0,
        132,
        9,
        29,
        0,
        0,
        68,
        1,
        0,
        0,
        0,
        255,
        66,
        0,
        0,
        255,
        66
      ]
    }
  ],
  "weight_encoding": "eightbit",
  "memory_layout": {
    "total_size": 9506180,
    "allocations": {
      "v0": {
        "name": "v0",
        "offset": 4114820,
        "size": 221184
      },
      "v1": {
        "name": "v1",
        "offset": 2124164,
        "size": 1990656
      },
      "v2": {
        "name": "v2",
        "offset": 1902980,
        "size": 884736
      },
      "v3": {
        "name": "v3",
        "offset": 1817792,
        "size": 128
      },
      "v4": {
        "name": "v4",
        "offset": 1817920,
        "size": 128
      },
      "v5": {
        "name": "v5",
        "offset": 1818048,
        "size": 128
      },
      "v6": {
        "name": "v6",
        "offset": 1802240,
        "size": 7776
      },
      "v7": {
        "name": "v7",
        "offset": 1818176,
        "size": 128
      },
      "v8": {
        "name": "v8",
        "offset": 1902980,
        "size": 221184
      },
      "v9": {
        "name": "v9",
        "offset": 1819840,
        "size": 32
      },
      "v10": {
        "name": "v10",
        "offset": 1902980,
        "size": 442368
      },
      "v11": {
        "name": "v11",
        "offset": 0,
        "size": 147456
      },
      "v12": {
        "name": "v12",
        "offset": 1819872,
        "size": 32
      },
      "v13": {
        "name": "v13",
        "offset": 1818304,
        "size": 128
      },
      "v14": {
        "name": "v14",
        "offset": 1818432,
        "size": 128
      },
      "v15": {
        "name": "v15",
        "offset": 147456,
        "size": 147456
      },
      "v16": {
        "name": "v16",
        "offset": 4114820,
        "size": 221184
      },
      "v17": {
        "name": "v17",
        "offset": 1902980,
        "size": 884736
      },
      "v18": {
        "name": "v18",
        "offset": 1819456,
        "size": 64
      },
      "v19": {
        "name": "v19",
        "offset": 4336004,
        "size": 221184
      },
      "v20": {
        "name": "v20",
        "offset": 1818560,
        "size": 128
      },
      "v21": {
        "name": "v21",
        "offset": 1902980,
        "size": 884736
      },
      "v22": {
        "name": "v22",
        "offset": 294912,
        "size": 147456
      },
      "v23": {
        "name": "v23",
        "offset": 2787716,
        "size": 3538944
      },
      "v24": {
        "name": "v24",
        "offset": 4336004,
        "size": 221184
      },
      "v25": {
        "name": "v25",
        "offset": 1819904,
        "size": 32
      },
      "v26": {
        "name": "v26",
        "offset": 2787716,
        "size": 6718464
      },
      "v27": {
        "name": "v27",
        "offset": 442368,
        "size": 147456
      },
      "v28": {
        "name": "v28",
        "offset": 589824,
        "size": 147456
      },
      "v29": {
        "name": "v29",
        "offset": 1902980,
        "size": 884736
      },
      "v30": {
        "name": "v30",
        "offset": 1818688,
        "size": 128
      },
      "v31": {
        "name": "v31",
        "offset": 737280,
        "size": 147456
      },
      "v32": {
        "name": "v32",
        "offset": 1819936,
        "size": 32
      },
      "v33": {
        "name": "v33",
        "offset": 1902980,
        "size": 221184
      },
      "v34": {
        "name": "v34",
        "offset": 1819520,
        "size": 64
      },
      "v35": {
        "name": "v35",
        "offset": 1902980,
        "size": 442368
      },
      "v36": {
        "name": "v36",
        "offset": 1902980,
        "size": 221184
      },
      "v37": {
        "name": "v37",
        "offset": 4114820,
        "size": 221184
      },
      "v38": {
        "name": "v38",
        "offset": 1819584,
        "size": 64
      },
      "v39": {
        "name": "v39",
        "offset": 1819648,
        "size": 64
      },
      "v40": {
        "name": "v40",
        "offset": 1810016,
        "size": 7776
      },
      "v41": {
        "name": "v41",
        "offset": 1818816,
        "size": 128
      },
      "v42": {
        "name": "v42",
        "offset": 1902980,
        "size": 884736
      },
      "v43": {
        "name": "v43",
        "offset": 2124164,
        "size": 1990656
      },
      "v44": {
        "name": "v44",
        "offset": 884736,
        "size": 147456
      },
      "v45": {
        "name": "v45",
        "offset": 1902980,
        "size": 442368
      },
      "v46": {
        "name": "v46",
        "offset": 1820036,
        "size": 82944
      },
      "v47": {
        "name": "v47",
        "offset": 2345348,
        "size": 1769472
      },
      "v48": {
        "name": "v48",
        "offset": 1902980,
        "size": 442368
      },
      "v49": {
        "name": "v49",
        "offset": 1032192,
        "size": 147456
      },
      "v50": {
        "name": "v50",
        "offset": 1179648,
        "size": 147456
      },
      "v51": {
        "name": "v51",
        "offset": 2124164,
        "size": 221184
      },
      "v52": {
        "name": "v52",
        "offset": 1902980,
        "size": 82944
      },
      "v53": {
        "name": "v53",
        "offset": 1902980,
        "size": 221184
      },
      "v54": {
        "name": "v54",
        "offset": 1902980,
        "size": 221184
      },
      "v55": {
        "name": "v55",
        "offset": 1902980,
        "size": 82944
      },
      "v56": {
        "name": "v56",
        "offset": 1736704,
        "size": 32768
      },
      "v57": {
        "name": "v57",
        "offset": 1902980,
        "size": 1990656
      },
      "v58": {
        "name": "v58",
        "offset": 2787716,
        "size": 6718464
      },
      "v59": {
        "name": "v59",
        "offset": 1819968,
        "size": 32
      },
      "v60": {
        "name": "v60",
        "offset": 1902980,
        "size": 442368
      },
      "v61": {
        "name": "v61",
        "offset": 1818944,
        "size": 128
      },
      "v62": {
        "name": "v62",
        "offset": 2124164,
        "size": 1990656
      },
      "v63": {
        "name": "v63",
        "offset": 1902980,
        "size": 442368
      },
      "v64": {
        "name": "v64",
        "offset": 2124164,
        "size": 221184
      },
      "v65": {
        "name": "v65",
        "offset": 4336004,
        "size": 221184
      },
      "v66": {
        "name": "v66",
        "offset": 2787716,
        "size": 3538944
      },
      "v67": {
        "name": "v67",
        "offset": 1819072,
        "size": 128
      },
      "v68": {
        "name": "v68",
        "offset": 1902980,
        "size": 884736
      },
      "v69": {
        "name": "v69",
        "offset": 1819200,
        "size": 128
      },
      "v70": {
        "name": "v70",
        "offset": 1902980,
        "size": 884736
      },
      "v71": {
        "name": "v71",
        "offset": 2124164,
        "size": 1990656
      },
      "v72": {
        "name": "v72",
        "offset": 1820032,
        "size": 3
      },
      "v73": {
        "name": "v73",
        "offset": 2124164,
        "size": 1990656
      },
      "v74": {
        "name": "v74",
        "offset": 4114820,
        "size": 221184
      },
      "v75": {
        "name": "v75",
        "offset": 2345348,
        "size": 1990656
      },
      "v76": {
        "name": "v76",
        "offset": 2124164,
        "size": 1990656
      },
      "v77": {
        "name": "v77",
        "offset": 4336004,
        "size": 221184
      },
      "v78": {
        "name": "v78",
        "offset": 1474560,
        "size": 131072
      },
      "v79": {
        "name": "v79",
        "offset": 1902980,
        "size": 82944
      },
      "v80": {
        "name": "v80",
        "offset": 1819712,
        "size": 64
      },
      "v81": {
        "name": "v81",
        "offset": 1769472,
        "size": 32768
      },
      "v82": {
        "name": "v82",
        "offset": 1819776,
        "size": 64
      },
      "v83": {
        "name": "v83",
        "offset": 4336004,
        "size": 221184
      },
      "v84": {
        "name": "v84",
        "offset": 1902980,
        "size": 442368
      },
      "v85": {
        "name": "v85",
        "offset": 1820000,
        "size": 32
      },
      "v86": {
        "name": "v86",
        "offset": 1819328,
        "size": 128
      },
      "v87": {
        "name": "v87",
        "offset": 2345348,
        "size": 1769472
      },
      "v88": {
        "name": "v88",
        "offset": 1902980,
        "size": 442368
      },
      "v89": {
        "name": "v89",
        "offset": 1902980,
        "size": 221184
      },
      "v90": {
        "name": "v90",
        "offset": 2124164,
        "size": 1990656
      },
      "v91": {
        "name": "v91",
        "offset": 1902980,
        "size": 82944
      },
      "v92": {
        "name": "v92",
        "offset": 1902980,
        "size": 1990656
      },
      "v93": {
        "name": "v93",
        "offset": 1327104,
        "size": 147456
      },
      "v94": {
        "name": "v94",
        "offset": 1902980,
        "size": 884736
      },
      "v95": {
        "name": "v95",
        "offset": 1902980,
        "size": 221184
      },
      "v96": {
        "name": "v96",
        "offset": 1605632,
        "size": 131072
      }
    }
  },
  "inputs": [
    "v46"
  ],
  "outputs": [
    "v55"
  ],
  "licenses": {
    "webdnn": "(C) Machine Intelligence Laboratory (The University of Tokyo), MIT License"
  }
}