{
  "kernel_source": "\n#include <metal_stdlib>\nusing namespace metal;\n\n#define OPTIMIZE 1\n\n\nkernel void im2col_09d302ed2504e8c6ffb091eb52783d703192b009f7b736169fc88e6d(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index_thread[[thread_position_in_threadgroup]],\n                          ushort index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 0\n#define SW_EQUAL_1 0\n#define C1_DIVIDABLE_BY_4 0\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)(data_buffer + meta_buffer[0]);\n    device float4 *col4 = (device float4 *)(data_buffer + meta_buffer[1]);\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = data_buffer + meta_buffer[0];\n    device float *col = data_buffer + meta_buffer[1];\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[10];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[11];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n            const int h2 = h1 + PH - kh;\n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n            const int h2 = (h1 + PH - kh) / SH;\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n                const int w2 = w1 + PW - kw;\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n                const int w2 = (w1 + PW - kw) / SW;\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_013500f34dbc579b02f98e2fc00e6ec2c135615172ef93afac383be7(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 0\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 1\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = (result0[0]>0?result0[0]:0);\n            result0[1] = (result0[1]>0?result0[1]:0);\n            result0[2] = (result0[2]>0?result0[2]:0);\n            result0[3] = (result0[3]>0?result0[3]:0);\n            result1[0] = (result1[0]>0?result1[0]:0);\n            result1[1] = (result1[1]>0?result1[1]:0);\n            result1[2] = (result1[2]>0?result1[2]:0);\n            result1[3] = (result1[3]>0?result1[3]:0);\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:0)) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:0)) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:0)) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:0)) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n\n\nkernel void maxpooling2d_abbf0cbbe7d932ae9b899521f547addf64d623681882136ff7a47dbf(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = data_buffer + meta_buffer[0];\n    device float *Y = data_buffer + meta_buffer[1];\n    const int N = meta_buffer[2];\n    const int H1 = meta_buffer[3];\n    const int W1 = meta_buffer[4];\n    const int C = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int K = meta_buffer[8];\n    const int S = meta_buffer[9];\n    const int P = meta_buffer[10];\n    \n    for (int gid = index; gid < N * H2 * W2 * C; gid += num_threads) {\n        const int c = gid % C;\n        const int w2 = gid / C % W2;\n        const int h2 = gid / C / W2 % H2;\n        const int n = gid / C / W2 / H2;\n\n        float v = -1e7;\n        for (int kh = 0; kh < K; kh++) {\n            const int h1 = h2 * S - P + kh;\n            if (h1 < 0 || h1 >= H1) continue;\n            \n            for (int kw = 0; kw < K; kw++) {\n                const int w1 = w2 * S - P + kw;\n                if (w1 < 0 || w1 >= W1) continue;\n\n                v = v > X[((n * H1 + h1) * W1 + w1) * C + c] ? v : X[((n * H1 + h1) * W1 + w1) * C + c];\n            }\n        }\n\n        Y[gid] = v;\n    }\n}\n\n\nkernel void sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 1\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = (result0[0]>0?result0[0]:0);\n            result0[1] = (result0[1]>0?result0[1]:0);\n            result0[2] = (result0[2]>0?result0[2]:0);\n            result0[3] = (result0[3]>0?result0[3]:0);\n            result1[0] = (result1[0]>0?result1[0]:0);\n            result1[1] = (result1[1]>0?result1[1]:0);\n            result1[2] = (result1[2]>0?result1[2]:0);\n            result1[3] = (result1[3]>0?result1[3]:0);\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:0)) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:0)) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:0)) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:0)) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n\n\nkernel void im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index_thread[[thread_position_in_threadgroup]],\n                          ushort index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 1\n#define SW_EQUAL_1 1\n#define C1_DIVIDABLE_BY_4 1\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)(data_buffer + meta_buffer[0]);\n    device float4 *col4 = (device float4 *)(data_buffer + meta_buffer[1]);\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = data_buffer + meta_buffer[0];\n    device float *col = data_buffer + meta_buffer[1];\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[10];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[11];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n            const int h2 = h1 + PH - kh;\n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n            const int h2 = (h1 + PH - kh) / SH;\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n                const int w2 = w1 + PW - kw;\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n                const int w2 = (w1 + PW - kw) / SW;\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_ed6d29d44fa8fca55fe3895ec9437cecf2e0d0705a7ec47017e9231d(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 1\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = result0[0];\n            result0[1] = result0[1];\n            result0[2] = result0[2];\n            result0[3] = result0[3];\n            result1[0] = result1[0];\n            result1[1] = result1[1];\n            result1[2] = result1[2];\n            result1[3] = result1[3];\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n\n\nkernel void elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n#define N_DIVIDABLE_BY_4 1\n#define HAS_INLINE 1\n\n#if OPTIMIZE && N_DIVIDABLE_BY_4\n    #define T_VALUE float4\n#else\n    #define T_VALUE float\n#endif\n\n\n#if OPTIMIZE && N_DIVIDABLE_BY_4\n    const device float4 *X0 = (const device float4 *)(data_buffer + meta_buffer[0]);\n    const device float4 *X1 = (const device float4 *)(data_buffer + meta_buffer[1]);\n    device float4 *Y = (device float4 *)(data_buffer + meta_buffer[2]);\n    const int N = (meta_buffer[3]) >> 2;\n#else\n    const device float *X0 = data_buffer + meta_buffer[0];\n    const device float *X1 = data_buffer + meta_buffer[1];\n    device float *Y = data_buffer + meta_buffer[2];\n    const int N = meta_buffer[3];\n#endif\n  \n    for (int gid = index; gid < N; gid += num_threads) {\n\n        T_VALUE result = X0[gid] + X1[gid];\n\n#if OPTIMIZE && HAS_INLINE\n    #if OPTIMIZE && N_DIVIDABLE_BY_4\n            result[0] = (result[0]>0?result[0]:0);\n            result[1] = (result[1]>0?result[1]:0);\n            result[2] = (result[2]>0?result[2]:0);\n            result[3] = (result[3]>0?result[3]:0);\n    #else\n            result = (result>0?result:0);\n    #endif\n#endif\n\n        Y[gid] = result;\n    }\n\n\n#undef N_DIVIDABLE_BY_4 \n#undef HAS_INLINE\n}\n\n\nkernel void im2col_b062ef1357dc50ca7053d06e2be286ae1360ef7fa6d45aad8b3dbdd1(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index_thread[[thread_position_in_threadgroup]],\n                          ushort index_group[[threadgroup_position_in_grid]])\n{\n#define SH_EQUAL_1 0\n#define SW_EQUAL_1 0\n#define C1_DIVIDABLE_BY_4 1\n\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    const device float4 *im4 = (const device float4 *)(data_buffer + meta_buffer[0]);\n    device float4 *col4 = (device float4 *)(data_buffer + meta_buffer[1]);\n    const int C1_4 = (meta_buffer[3]) >> 2;\n#else\n    const device float *im = data_buffer + meta_buffer[0];\n    device float *col = data_buffer + meta_buffer[1];\n    const int C1 = meta_buffer[3];\n#endif\n\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n\n#if !OPTIMIZE || !SH_EQUAL_1\n    const int SH = meta_buffer[10];\n#endif\n\n#if !OPTIMIZE || !SW_EQUAL_1\n    const int SW = meta_buffer[11];\n#endif\n\n    const int H1P = H1 + 2 * PH;\n    const int W1P = W1 + 2 * PW;\n\n    const int w1 = (index_group % W1P) - PW;\n    const int h1 = (index_group / W1P % H1P) - PH;\n    const int  n = index_group / W1P / H1P;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n    for (int c1_4 = index_thread; c1_4 < C1_4; c1_4 += 64) {\n        const float4 v4 = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im4[((n * H1 + h1) * W1 + w1) * C1_4 + c1_4];\n#else\n    for (int c1 = index_thread; c1 < C1; c1 += 64) {\n        const float v = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n * H1 + h1) * W1 + w1) * C1 + c1];\n#endif\n\n#if OPTIMIZE && SH_EQUAL_1\n        for (int kh = 0; kh < KH; kh++) {\n            const int h2 = h1 + PH - kh;\n#else\n        for (int kh = (h1 + PH) % SH; kh < KH; kh += SH) {\n            const int h2 = (h1 + PH - kh) / SH;\n#endif\n            if (h2 < 0 || h2 >= H2) continue;\n\n#if OPTIMIZE && SH_EQUAL_1\n            for (int kw = 0; kw < KW; kw++) {\n                const int w2 = w1 + PW - kw;\n#else\n            for (int kw = (w1 + PW) % SW; kw < KW; kw += SW) {\n                const int w2 = (w1 + PW - kw) / SW;\n#endif\n                if (w2 < 0 || w2 >= W2) continue;\n\n#if OPTIMIZE && C1_DIVIDABLE_BY_4\n                col4[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1_4 + c1_4] = v4;\n#else\n                col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1] = v;\n#endif\n            }\n        }\n    }\n\n\n#undef SH_EQUAL_1\n#undef SW_EQUAL_1\n#undef C1_DIVIDABLE_BY_4\n}\n\n\nkernel void sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 1\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = (result0[0]>0?result0[0]:0);\n            result0[1] = (result0[1]>0?result0[1]:0);\n            result0[2] = (result0[2]>0?result0[2]:0);\n            result0[3] = (result0[3]>0?result0[3]:0);\n            result1[0] = (result1[0]>0?result1[0]:0);\n            result1[1] = (result1[1]>0?result1[1]:0);\n            result1[2] = (result1[2]>0?result1[2]:0);\n            result1[3] = (result1[3]>0?result1[3]:0);\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:0)) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]:0)) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:0)) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = (result[m_sub * 2 + n_sub1][n_sub2]>0?result[m_sub * 2 + n_sub1][n_sub2]:0)) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n\n\nkernel void sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 1\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = result0[0];\n            result0[1] = result0[1];\n            result0[2] = result0[2];\n            result0[3] = result0[3];\n            result1[0] = result1[0];\n            result1[1] = result1[1];\n            result1[2] = result1[2];\n            result1[3] = result1[3];\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n\n\nkernel void averagepooling2d_e050647f62e9a1f17f4021c68f0a788d24d2def0c117ca8c676dd1c4(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *X = data_buffer + meta_buffer[0];\n    device float *Y = data_buffer + meta_buffer[1];\n    const int N = meta_buffer[2];\n    const int H1 = meta_buffer[3];\n    const int W1 = meta_buffer[4];\n    const int C = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int K = meta_buffer[8];\n    const int S = meta_buffer[9];\n    const int P = meta_buffer[10];\n    \n    for (int gid = index; gid < N * H2 * W2 * C; gid += num_threads) {\n        const int c = gid % C;\n        const int w2 = gid / C % W2;\n        const int h2 = gid / C / W2 % H2;\n        const int n = gid / C / W2 / H2;\n\n        float v = 0;\n        for (int kh = 0; kh < K; kh++) {\n            const int h1 = h2 * S - P + kh;\n            if (h1 < 0 || h1 >= H1) continue;\n            \n            for (int kw = 0; kw < K; kw++) {\n                const int w1 = w2 * S - P + kw;\n                if (w1 < 0 || w1 >= W1) continue;\n\n                v += X[((n * H1 + h1) * W1 + w1) * C + c];\n            }\n        }\n        v /= K * K;\n\n        Y[gid] = v;\n    }\n}\n\n\nkernel void flatten_3bacc8004cfcbd15b5c1990bda8e5739d9f8cabbf69984f05787e6aa(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *x = data_buffer + meta_buffer[0];\n    device float *y = data_buffer + meta_buffer[1];\n\n    const int N = meta_buffer[2];\n\n    for (int gid = index; gid < N; gid += num_threads) {\n        y[gid] = x[gid];\n    }\n}\n\n\nkernel void sgemm_e2ab1ab87e0148e2ea1830c3116be4c003e26807339d96d6aefc5f96(device float *data_buffer[[buffer(0)]],\n                          const device int * meta_buffer [[buffer(1)]],\n                          ushort index[[thread_index_in_threadgroup]],\n                          ushort2 group_position[[threadgroup_position_in_grid]])\n{\n#define TRANSPOSE_A 1\n#define TRANSPOSE_B 1\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 0\n#define K_DIVIDABLE_BY_8 1\n\n#if TRANSPOSE_A\n    #define A_STRIDE_K 1\n    #define A_STRIDE_M K\n#else\n    #define A_STRIDE_K M\n    #define A_STRIDE_M 1\n#endif\n\n#if TRANSPOSE_B\n    #define B_STRIDE_K N\n    #define B_STRIDE_N 1\n#else\n    #define B_STRIDE_K 1\n    #define B_STRIDE_N K\n#endif\n\n#define WITH_BIAS 1\n#define HAS_INLINE 1\n\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64  && N_DIVIDABLE_BY_64 && !TRANSPOSE_A && TRANSPOSE_B && OPTIMIZE\n    const device float4 *load_target4 = (index & 32) \n        ? (const device float4 *)(data_buffer + meta_buffer[1]) \n        : (const device float4 *)(data_buffer + meta_buffer[0]);\n#else\n    const device float *load_target = (index & 32) \n        ? (data_buffer + meta_buffer[1]) \n        : (data_buffer + meta_buffer[0]);\n#endif\n\n    const int M = meta_buffer[4];\n    const int N = meta_buffer[5];\n\n    const int K = meta_buffer[6];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE && !TRANSPOSE_A && TRANSPOSE_B\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            ); \n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            ); \n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            ); \n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n    \n#if OPTIMIZE && N_DIVIDABLE_BY_64\n    #if WITH_BIAS\n        float4 b[2];\n        const device float4 *bias4 = (const device float4 *)(data_buffer + meta_buffer[3]);\n        b[0] = bias4[group_position.y * 16 + n_offset * 2 + 0];\n        b[1] = bias4[group_position.y * 16 + n_offset * 2 + 1];\n    #endif\n    \n        device float4 *C4 = (device float4 *)(data_buffer + meta_buffer[2]);\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n    #if WITH_BIAS\n            result0 += b[0];\n            result1 += b[1];\n    #endif\n\n    #if HAS_INLINE\n            result0[0] = result0[0];\n            result0[1] = result0[1];\n            result0[2] = result0[2];\n            result0[3] = result0[3];\n            result1[0] = result1[0];\n            result1[1] = result1[1];\n            result1[2] = result1[2];\n            result1[3] = result1[3];\n    #endif\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n            \n            m++;\n        }\n#else\n    #if WITH_BIAS\n        const device float *bias = data_buffer + meta_buffer[3];\n        float b[8];\n        for (int n_sub = 0; n_sub < 8; n_sub++)\n        {\n            b[n_sub] = (group_position.y * 64 + n_offset * 8 + n_sub < N)\n                ? bias[group_position.y * 64 + n_offset * 8 + n_sub]\n                : 0;\n        }\n    #endif\n\n        device float *C = data_buffer + meta_buffer[2];\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if WITH_BIAS\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2] + b[n_sub1*4+n_sub2]) : 0;\n        #endif\n    #else\n        #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n        #endif\n    #endif\n                    n++;\n                }\n            }\n            \n            m++;\n        }\n#endif\n\n    }\n\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef TRANSPOSE_A\n#undef TRANSPOSE_B\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef A_STRIDE_M\n#undef WITH_BIAS\n#undef HAS_INLINE\n}\n",
  "exec_infos": [
    {
      "entry_func_name": "im2col_09d302ed2504e8c6ffb091eb52783d703192b009f7b736169fc88e6d",
      "threadgroups_per_grid": {
        "width": 52900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        144,
        133,
        1,
        104,
        220,
        135,
        1,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_013500f34dbc579b02f98e2fc00e6ec2c135615172ef93afac383be7",
      "threadgroups_per_grid": {
        "width": 196,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        240,
        132,
        1,
        104,
        255,
        163,
        1,
        168,
        143,
        133,
        1,
        0,
        49,
        0,
        0,
        64,
        0,
        0,
        0,
        147,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "maxpooling2d_abbf0cbbe7d932ae9b899521f547addf64d623681882136ff7a47dbf",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        255,
        163,
        1,
        104,
        63,
        176,
        1,
        1,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        112,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        63,
        176,
        1,
        192,
        20,
        133,
        1,
        104,
        220,
        135,
        1,
        40,
        144,
        133,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 3364,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        236,
        138,
        1,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        236,
        138,
        1,
        0,
        208,
        129,
        1,
        104,
        124,
        166,
        1,
        104,
        143,
        133,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_ed6d29d44fa8fca55fe3895ec9437cecf2e0d0705a7ec47017e9231d",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        124,
        166,
        1,
        0,
        112,
        132,
        1,
        104,
        220,
        135,
        1,
        168,
        128,
        133,
        1,
        64,
        12,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_ed6d29d44fa8fca55fe3895ec9437cecf2e0d0705a7ec47017e9231d",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        63,
        176,
        1,
        0,
        240,
        131,
        1,
        104,
        28,
        148,
        1,
        168,
        137,
        133,
        1,
        64,
        12,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        28,
        148,
        1,
        104,
        220,
        135,
        1,
        0,
        64,
        12,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        112,
        131,
        1,
        104,
        28,
        148,
        1,
        40,
        143,
        133,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 3364,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        28,
        148,
        1,
        104,
        44,
        151,
        1,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        44,
        151,
        1,
        0,
        96,
        130,
        1,
        104,
        28,
        148,
        1,
        232,
        142,
        133,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_ed6d29d44fa8fca55fe3895ec9437cecf2e0d0705a7ec47017e9231d",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        28,
        148,
        1,
        0,
        48,
        132,
        1,
        104,
        124,
        166,
        1,
        168,
        124,
        133,
        1,
        64,
        12,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        124,
        166,
        1,
        104,
        220,
        135,
        1,
        104,
        124,
        166,
        1,
        0,
        64,
        12,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        124,
        166,
        1,
        0,
        176,
        131,
        1,
        104,
        220,
        135,
        1,
        168,
        142,
        133,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 3364,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        236,
        138,
        1,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_de92eadbb41e4990802a9b4643d888d62551ef998c21e4779a7fd66e",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        236,
        138,
        1,
        0,
        64,
        129,
        1,
        104,
        220,
        135,
        1,
        232,
        143,
        133,
        1,
        64,
        12,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_ed6d29d44fa8fca55fe3895ec9437cecf2e0d0705a7ec47017e9231d",
      "threadgroups_per_grid": {
        "width": 49,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        176,
        132,
        1,
        104,
        44,
        151,
        1,
        168,
        123,
        133,
        1,
        64,
        12,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        44,
        151,
        1,
        104,
        124,
        166,
        1,
        104,
        44,
        151,
        1,
        0,
        64,
        12,
        0
      ]
    },
    {
      "entry_func_name": "im2col_b062ef1357dc50ca7053d06e2be286ae1360ef7fa6d45aad8b3dbdd1",
      "threadgroups_per_grid": {
        "width": 3136,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        44,
        151,
        1,
        104,
        220,
        135,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        240,
        130,
        1,
        104,
        164,
        149,
        1,
        168,
        139,
        133,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        1,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        164,
        149,
        1,
        104,
        220,
        135,
        1,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        0,
        116,
        1,
        104,
        164,
        149,
        1,
        168,
        140,
        133,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        164,
        149,
        1,
        0,
        64,
        123,
        1,
        104,
        220,
        135,
        1,
        168,
        120,
        133,
        1,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        128,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_b062ef1357dc50ca7053d06e2be286ae1360ef7fa6d45aad8b3dbdd1",
      "threadgroups_per_grid": {
        "width": 3136,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        44,
        151,
        1,
        104,
        252,
        141,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        56,
        0,
        0,
        0,
        56,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        252,
        141,
        1,
        0,
        64,
        118,
        1,
        104,
        12,
        145,
        1,
        168,
        104,
        133,
        1,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        12,
        145,
        1,
        104,
        220,
        135,
        1,
        0,
        32,
        6,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        64,
        126,
        1,
        104,
        252,
        141,
        1,
        40,
        141,
        133,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        252,
        141,
        1,
        104,
        132,
        143,
        1,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        132,
        143,
        1,
        0,
        128,
        111,
        1,
        104,
        252,
        141,
        1,
        168,
        138,
        133,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        252,
        141,
        1,
        0,
        64,
        122,
        1,
        104,
        180,
        152,
        1,
        168,
        102,
        133,
        1,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        128,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        180,
        152,
        1,
        104,
        220,
        135,
        1,
        104,
        180,
        152,
        1,
        0,
        32,
        6,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        180,
        152,
        1,
        0,
        64,
        127,
        1,
        104,
        220,
        135,
        1,
        168,
        141,
        133,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        100,
        137,
        1,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        100,
        137,
        1,
        0,
        64,
        109,
        1,
        104,
        44,
        151,
        1,
        40,
        139,
        133,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        44,
        151,
        1,
        0,
        64,
        128,
        1,
        104,
        220,
        135,
        1,
        168,
        116,
        133,
        1,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        128,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        180,
        152,
        1,
        104,
        220,
        135,
        1,
        0,
        32,
        6,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        64,
        125,
        1,
        104,
        252,
        141,
        1,
        40,
        140,
        133,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        252,
        141,
        1,
        104,
        132,
        143,
        1,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        132,
        143,
        1,
        0,
        192,
        113,
        1,
        104,
        252,
        141,
        1,
        40,
        142,
        133,
        1,
        16,
        3,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 13,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        252,
        141,
        1,
        0,
        64,
        124,
        1,
        104,
        132,
        143,
        1,
        168,
        114,
        133,
        1,
        16,
        3,
        0,
        0,
        0,
        2,
        0,
        0,
        128,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        132,
        143,
        1,
        104,
        220,
        135,
        1,
        104,
        132,
        143,
        1,
        0,
        32,
        6,
        0
      ]
    },
    {
      "entry_func_name": "im2col_b062ef1357dc50ca7053d06e2be286ae1360ef7fa6d45aad8b3dbdd1",
      "threadgroups_per_grid": {
        "width": 784,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        132,
        143,
        1,
        104,
        220,
        135,
        1,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        64,
        120,
        1,
        104,
        192,
        142,
        1,
        168,
        134,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        192,
        142,
        1,
        104,
        220,
        135,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        64,
        13,
        1,
        104,
        192,
        142,
        1,
        168,
        132,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        192,
        142,
        1,
        0,
        64,
        105,
        1,
        104,
        220,
        135,
        1,
        192,
        68,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_b062ef1357dc50ca7053d06e2be286ae1360ef7fa6d45aad8b3dbdd1",
      "threadgroups_per_grid": {
        "width": 784,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        132,
        143,
        1,
        104,
        236,
        138,
        1,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        28,
        0,
        0,
        0,
        28,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        236,
        138,
        1,
        0,
        64,
        49,
        1,
        104,
        116,
        140,
        1,
        192,
        76,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        116,
        140,
        1,
        104,
        220,
        135,
        1,
        0,
        16,
        3,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        64,
        69,
        1,
        104,
        236,
        138,
        1,
        168,
        136,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        236,
        138,
        1,
        104,
        176,
        139,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        176,
        139,
        1,
        0,
        64,
        22,
        1,
        104,
        236,
        138,
        1,
        168,
        130,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        236,
        138,
        1,
        0,
        64,
        77,
        1,
        104,
        72,
        144,
        1,
        192,
        84,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        72,
        144,
        1,
        104,
        220,
        135,
        1,
        104,
        72,
        144,
        1,
        0,
        16,
        3,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        72,
        144,
        1,
        0,
        64,
        89,
        1,
        104,
        220,
        135,
        1,
        168,
        129,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        160,
        136,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        160,
        136,
        1,
        0,
        64,
        40,
        1,
        104,
        132,
        143,
        1,
        168,
        135,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        132,
        143,
        1,
        0,
        64,
        101,
        1,
        104,
        220,
        135,
        1,
        192,
        88,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        72,
        144,
        1,
        104,
        220,
        135,
        1,
        0,
        16,
        3,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        64,
        65,
        1,
        104,
        236,
        138,
        1,
        168,
        127,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        236,
        138,
        1,
        104,
        176,
        139,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        176,
        139,
        1,
        0,
        64,
        4,
        1,
        104,
        236,
        138,
        1,
        168,
        131,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        236,
        138,
        1,
        0,
        64,
        97,
        1,
        104,
        72,
        144,
        1,
        192,
        92,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        72,
        144,
        1,
        104,
        220,
        135,
        1,
        104,
        72,
        144,
        1,
        0,
        16,
        3,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        72,
        144,
        1,
        0,
        64,
        81,
        1,
        104,
        220,
        135,
        1,
        168,
        125,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        160,
        136,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        160,
        136,
        1,
        0,
        64,
        31,
        1,
        104,
        132,
        143,
        1,
        168,
        122,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        132,
        143,
        1,
        0,
        64,
        93,
        1,
        104,
        220,
        135,
        1,
        192,
        80,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        72,
        144,
        1,
        104,
        220,
        135,
        1,
        0,
        16,
        3,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        64,
        73,
        1,
        104,
        236,
        138,
        1,
        168,
        133,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        236,
        138,
        1,
        104,
        176,
        139,
        1,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        176,
        139,
        1,
        0,
        64,
        251,
        0,
        104,
        236,
        138,
        1,
        168,
        126,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        9,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        236,
        138,
        1,
        0,
        64,
        85,
        1,
        104,
        176,
        139,
        1,
        192,
        72,
        133,
        1,
        196,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        176,
        139,
        1,
        104,
        220,
        135,
        1,
        104,
        176,
        139,
        1,
        0,
        16,
        3,
        0
      ]
    },
    {
      "entry_func_name": "im2col_b062ef1357dc50ca7053d06e2be286ae1360ef7fa6d45aad8b3dbdd1",
      "threadgroups_per_grid": {
        "width": 196,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        176,
        139,
        1,
        104,
        220,
        135,
        1,
        1,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        64,
        57,
        1,
        104,
        78,
        139,
        1,
        168,
        106,
        133,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 81,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        78,
        139,
        1,
        104,
        220,
        135,
        1,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        0,
        36,
        0,
        104,
        78,
        139,
        1,
        168,
        110,
        133,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        18,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 32,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        78,
        139,
        1,
        0,
        64,
        203,
        0,
        104,
        220,
        135,
        1,
        192,
        36,
        133,
        1,
        49,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_b062ef1357dc50ca7053d06e2be286ae1360ef7fa6d45aad8b3dbdd1",
      "threadgroups_per_grid": {
        "width": 196,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        176,
        139,
        1,
        104,
        100,
        137,
        1,
        1,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        14,
        0,
        0,
        0,
        14,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 32,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        100,
        137,
        1,
        0,
        0,
        108,
        0,
        104,
        40,
        138,
        1,
        192,
        52,
        133,
        1,
        49,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        4,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        40,
        138,
        1,
        104,
        220,
        135,
        1,
        0,
        136,
        1,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        0,
        64,
        171,
        0,
        104,
        100,
        137,
        1,
        168,
        100,
        133,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        8,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 81,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        100,
        137,
        1,
        104,
        198,
        137,
        1,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        198,
        137,
        1,
        0,
        0,
        0,
        0,
        104,
        100,
        137,
        1,
        168,
        118,
        133,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        18,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 32,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        100,
        137,
        1,
        0,
        64,
        219,
        0,
        104,
        18,
        140,
        1,
        192,
        60,
        133,
        1,
        49,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        18,
        140,
        1,
        104,
        220,
        135,
        1,
        104,
        18,
        140,
        1,
        0,
        136,
        1,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        18,
        140,
        1,
        0,
        64,
        187,
        0,
        104,
        220,
        135,
        1,
        168,
        108,
        133,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        8,
        0,
        0
      ]
    },
    {
      "entry_func_name": "im2col_9534045c27dfe34e7cccfd9420d35bc2389ae6668fcc2cee4fc25eea",
      "threadgroups_per_grid": {
        "width": 81,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        62,
        136,
        1,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_4da51d8deccbd9996ec21f011293b9d661520a375851e33b2b8c04c5",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        62,
        136,
        1,
        0,
        0,
        72,
        0,
        104,
        176,
        139,
        1,
        168,
        112,
        133,
        1,
        49,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        18,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_30e37503d7dc8fb90c8e4e3314d42a33f9d07c0f89ba48cc7f1d7322",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 32,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        176,
        139,
        1,
        0,
        64,
        235,
        0,
        104,
        220,
        135,
        1,
        192,
        44,
        133,
        1,
        49,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        2,
        0,
        0
      ]
    },
    {
      "entry_func_name": "elementwisesum_afa124be7948a09a0839f89f5b2dcf6fbd50f2b4e8860f79bec9285f",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        18,
        140,
        1,
        104,
        220,
        135,
        1,
        0,
        136,
        1,
        0
      ]
    },
    {
      "entry_func_name": "averagepooling2d_e050647f62e9a1f17f4021c68f0a788d24d2def0c117ca8c676dd1c4",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        220,
        135,
        1,
        104,
        100,
        137,
        1,
        1,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        0,
        8,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        7,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    {
      "entry_func_name": "flatten_3bacc8004cfcbd15b5c1990bda8e5739d9f8cabbf69984f05787e6aa",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        100,
        137,
        1,
        104,
        100,
        137,
        1,
        0,
        8,
        0,
        0
      ]
    },
    {
      "entry_func_name": "sgemm_e2ab1ab87e0148e2ea1830c3116be4c003e26807339d96d6aefc5f96",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        104,
        100,
        137,
        1,
        0,
        0,
        140,
        0,
        104,
        220,
        135,
        1,
        192,
        96,
        133,
        1,
        1,
        0,
        0,
        0,
        232,
        3,
        0,
        0,
        0,
        8,
        0,
        0
      ]
    }
  ],
  "weight_encoding": "eightbit",
  "memory_layout": {
    "total_size": 28528488,
    "allocations": {
      "v0": {
        "name": "v0",
        "offset": 25524904,
        "size": 256
      },
      "v1": {
        "name": "v1",
        "offset": 20004864,
        "size": 524288
      },
      "v2": {
        "name": "v2",
        "offset": 25519272,
        "size": 512
      },
      "v3": {
        "name": "v3",
        "offset": 25731176,
        "size": 451584
      },
      "v4": {
        "name": "v4",
        "offset": 11223040,
        "size": 1048576
      },
      "v5": {
        "name": "v5",
        "offset": 25681000,
        "size": 100352
      },
      "v6": {
        "name": "v6",
        "offset": 21053440,
        "size": 262144
      },
      "v7": {
        "name": "v7",
        "offset": 24788992,
        "size": 65536
      },
      "v8": {
        "name": "v8",
        "offset": 25519784,
        "size": 512
      },
      "v9": {
        "name": "v9",
        "offset": 26232936,
        "size": 200704
      },
      "v10": {
        "name": "v10",
        "offset": 25498816,
        "size": 4096
      },
      "v11": {
        "name": "v11",
        "offset": 25681000,
        "size": 200704
      },
      "v12": {
        "name": "v12",
        "offset": 16465920,
        "size": 589824
      },
      "v13": {
        "name": "v13",
        "offset": 25781352,
        "size": 2048
      },
      "v14": {
        "name": "v14",
        "offset": 25525160,
        "size": 256
      },
      "v15": {
        "name": "v15",
        "offset": 25489408,
        "size": 9408
      },
      "v16": {
        "name": "v16",
        "offset": 25681000,
        "size": 200704
      },
      "v17": {
        "name": "v17",
        "offset": 24854528,
        "size": 65536
      },
      "v18": {
        "name": "v18",
        "offset": 25529000,
        "size": 128
      },
      "v19": {
        "name": "v19",
        "offset": 25681000,
        "size": 802816
      },
      "v20": {
        "name": "v20",
        "offset": 25391104,
        "size": 16384
      },
      "v21": {
        "name": "v21",
        "offset": 25781352,
        "size": 25088
      },
      "v22": {
        "name": "v22",
        "offset": 24526848,
        "size": 131072
      },
      "v23": {
        "name": "v23",
        "offset": 25520296,
        "size": 512
      },
      "v24": {
        "name": "v24",
        "offset": 25956968,
        "size": 100352
      },
      "v25": {
        "name": "v25",
        "offset": 21315584,
        "size": 262144
      },
      "v26": {
        "name": "v26",
        "offset": 0,
        "size": 2359296
      },
      "v27": {
        "name": "v27",
        "offset": 25529128,
        "size": 128
      },
      "v28": {
        "name": "v28",
        "offset": 25407488,
        "size": 16384
      },
      "v29": {
        "name": "v29",
        "offset": 25511104,
        "size": 1024
      },
      "v30": {
        "name": "v30",
        "offset": 21577728,
        "size": 262144
      },
      "v31": {
        "name": "v31",
        "offset": 26684520,
        "size": 802816
      },
      "v32": {
        "name": "v32",
        "offset": 24920064,
        "size": 65536
      },
      "v33": {
        "name": "v33",
        "offset": 25681000,
        "size": 50176
      },
      "v34": {
        "name": "v34",
        "offset": 25512128,
        "size": 1024
      },
      "v35": {
        "name": "v35",
        "offset": 27688040,
        "size": 802816
      },
      "v36": {
        "name": "v36",
        "offset": 25931880,
        "size": 200704
      },
      "v37": {
        "name": "v37",
        "offset": 25530024,
        "size": 64
      },
      "v38": {
        "name": "v38",
        "offset": 25529256,
        "size": 128
      },
      "v39": {
        "name": "v39",
        "offset": 25906792,
        "size": 25088
      },
      "v40": {
        "name": "v40",
        "offset": 25423872,
        "size": 16384
      },
      "v41": {
        "name": "v41",
        "offset": 25513152,
        "size": 1024
      },
      "v42": {
        "name": "v42",
        "offset": 25518272,
        "size": 1000
      },
      "v43": {
        "name": "v43",
        "offset": 25529384,
        "size": 128
      },
      "v44": {
        "name": "v44",
        "offset": 12271616,
        "size": 1048576
      },
      "v45": {
        "name": "v45",
        "offset": 25530088,
        "size": 64
      },
      "v46": {
        "name": "v46",
        "offset": 25514176,
        "size": 1024
      },
      "v47": {
        "name": "v47",
        "offset": 25781352,
        "size": 25088
      },
      "v48": {
        "name": "v48",
        "offset": 25529512,
        "size": 128
      },
      "v49": {
        "name": "v49",
        "offset": 25358336,
        "size": 32768
      },
      "v50": {
        "name": "v50",
        "offset": 25502912,
        "size": 2048
      },
      "v51": {
        "name": "v51",
        "offset": 25525416,
        "size": 256
      },
      "v52": {
        "name": "v52",
        "offset": 26082408,
        "size": 100352
      },
      "v53": {
        "name": "v53",
        "offset": 26483816,
        "size": 802816
      },
      "v54": {
        "name": "v54",
        "offset": 25681000,
        "size": 200704
      },
      "v55": {
        "name": "v55",
        "offset": 26232936,
        "size": 200704
      },
      "v56": {
        "name": "v56",
        "offset": 25681000,
        "size": 100352
      },
      "v57": {
        "name": "v57",
        "offset": 25530152,
        "size": 64
      },
      "v58": {
        "name": "v58",
        "offset": 25504960,
        "size": 2048
      },
      "v59": {
        "name": "v59",
        "offset": 9175040,
        "size": 2048000
      },
      "v60": {
        "name": "v60",
        "offset": 25931880,
        "size": 451584
      },
      "v61": {
        "name": "v61",
        "offset": 13320192,
        "size": 1048576
      },
      "v62": {
        "name": "v62",
        "offset": 25520808,
        "size": 512
      },
      "v63": {
        "name": "v63",
        "offset": 25507008,
        "size": 2048
      },
      "v64": {
        "name": "v64",
        "offset": 25906792,
        "size": 25088
      },
      "v65": {
        "name": "v65",
        "offset": 25681000,
        "size": 401408
      },
      "v66": {
        "name": "v66",
        "offset": 14368768,
        "size": 1048576
      },
      "v67": {
        "name": "v67",
        "offset": 25440256,
        "size": 16384
      },
      "v68": {
        "name": "v68",
        "offset": 25247744,
        "size": 36864
      },
      "v69": {
        "name": "v69",
        "offset": 25456640,
        "size": 16384
      },
      "v70": {
        "name": "v70",
        "offset": 26784872,
        "size": 401408
      },
      "v71": {
        "name": "v71",
        "offset": 21839872,
        "size": 262144
      },
      "v72": {
        "name": "v72",
        "offset": 22102016,
        "size": 262144
      },
      "v73": {
        "name": "v73",
        "offset": 15417344,
        "size": 1048576
      },
      "v74": {
        "name": "v74",
        "offset": 25681000,
        "size": 25088
      },
      "v75": {
        "name": "v75",
        "offset": 27524968,
        "size": 802816
      },
      "v76": {
        "name": "v76",
        "offset": 25521320,
        "size": 512
      },
      "v77": {
        "name": "v77",
        "offset": 25525672,
        "size": 256
      },
      "v78": {
        "name": "v78",
        "offset": 25881704,
        "size": 50176
      },
      "v79": {
        "name": "v79",
        "offset": 25521832,
        "size": 512
      },
      "v80": {
        "name": "v80",
        "offset": 25681000,
        "size": 802816
      },
      "v81": {
        "name": "v81",
        "offset": 2359296,
        "size": 2359296
      },
      "v82": {
        "name": "v82",
        "offset": 26082408,
        "size": 100352
      },
      "v83": {
        "name": "v83",
        "offset": 25681000,
        "size": 225792
      },
      "v84": {
        "name": "v84",
        "offset": 25931880,
        "size": 200704
      },
      "v85": {
        "name": "v85",
        "offset": 25881704,
        "size": 50176
      },
      "v86": {
        "name": "v86",
        "offset": 25706088,
        "size": 225792
      },
      "v87": {
        "name": "v87",
        "offset": 25681000,
        "size": 100352
      },
      "v88": {
        "name": "v88",
        "offset": 26784872,
        "size": 401408
      },
      "v89": {
        "name": "v89",
        "offset": 26182760,
        "size": 401408
      },
      "v90": {
        "name": "v90",
        "offset": 25806440,
        "size": 225792
      },
      "v91": {
        "name": "v91",
        "offset": 25681000,
        "size": 100352
      },
      "v92": {
        "name": "v92",
        "offset": 4718592,
        "size": 2359296
      },
      "v93": {
        "name": "v93",
        "offset": 25681000,
        "size": 1843968
      },
      "v94": {
        "name": "v94",
        "offset": 17055744,
        "size": 589824
      },
      "v95": {
        "name": "v95",
        "offset": 25681000,
        "size": 401408
      },
      "v96": {
        "name": "v96",
        "offset": 25781352,
        "size": 2048
      },
      "v97": {
        "name": "v97",
        "offset": 25681000,
        "size": 200704
      },
      "v98": {
        "name": "v98",
        "offset": 25931880,
        "size": 25088
      },
      "v99": {
        "name": "v99",
        "offset": 20529152,
        "size": 524288
      },
      "v100": {
        "name": "v100",
        "offset": 25982056,
        "size": 200704
      },
      "v101": {
        "name": "v101",
        "offset": 25522344,
        "size": 512
      },
      "v102": {
        "name": "v102",
        "offset": 25284608,
        "size": 36864
      },
      "v103": {
        "name": "v103",
        "offset": 22364160,
        "size": 262144
      },
      "v104": {
        "name": "v104",
        "offset": 25530472,
        "size": 150528
      },
      "v105": {
        "name": "v105",
        "offset": 25781352,
        "size": 50176
      },
      "v106": {
        "name": "v106",
        "offset": 25681000,
        "size": 1000
      },
      "v107": {
        "name": "v107",
        "offset": 25881704,
        "size": 1806336
      },
      "v108": {
        "name": "v108",
        "offset": 25881704,
        "size": 50176
      },
      "v109": {
        "name": "v109",
        "offset": 24985600,
        "size": 65536
      },
      "v110": {
        "name": "v110",
        "offset": 25681000,
        "size": 200704
      },
      "v111": {
        "name": "v111",
        "offset": 25881704,
        "size": 1806336
      },
      "v112": {
        "name": "v112",
        "offset": 17645568,
        "size": 589824
      },
      "v113": {
        "name": "v113",
        "offset": 26132584,
        "size": 50176
      },
      "v114": {
        "name": "v114",
        "offset": 25931880,
        "size": 451584
      },
      "v115": {
        "name": "v115",
        "offset": 26232936,
        "size": 200704
      },
      "v116": {
        "name": "v116",
        "offset": 23937024,
        "size": 147456
      },
      "v117": {
        "name": "v117",
        "offset": 26483816,
        "size": 200704
      },
      "v118": {
        "name": "v118",
        "offset": 25522856,
        "size": 512
      },
      "v119": {
        "name": "v119",
        "offset": 25681000,
        "size": 401408
      },
      "v120": {
        "name": "v120",
        "offset": 18235392,
        "size": 589824
      },
      "v121": {
        "name": "v121",
        "offset": 25881704,
        "size": 50176
      },
      "v122": {
        "name": "v122",
        "offset": 25681000,
        "size": 200704
      },
      "v123": {
        "name": "v123",
        "offset": 25881704,
        "size": 100352
      },
      "v124": {
        "name": "v124",
        "offset": 25523368,
        "size": 512
      },
      "v125": {
        "name": "v125",
        "offset": 25525928,
        "size": 256
      },
      "v126": {
        "name": "v126",
        "offset": 26132584,
        "size": 50176
      },
      "v127": {
        "name": "v127",
        "offset": 26182760,
        "size": 50176
      },
      "v128": {
        "name": "v128",
        "offset": 25321472,
        "size": 36864
      },
      "v129": {
        "name": "v129",
        "offset": 25529640,
        "size": 128
      },
      "v130": {
        "name": "v130",
        "offset": 27688040,
        "size": 200704
      },
      "v131": {
        "name": "v131",
        "offset": 26232936,
        "size": 200704
      },
      "v132": {
        "name": "v132",
        "offset": 25530216,
        "size": 64
      },
      "v133": {
        "name": "v133",
        "offset": 25881704,
        "size": 50176
      },
      "v134": {
        "name": "v134",
        "offset": 25831528,
        "size": 100352
      },
      "v135": {
        "name": "v135",
        "offset": 27688040,
        "size": 802816
      },
      "v136": {
        "name": "v136",
        "offset": 22626304,
        "size": 262144
      },
      "v137": {
        "name": "v137",
        "offset": 25529768,
        "size": 128
      },
      "v138": {
        "name": "v138",
        "offset": 25473024,
        "size": 16384
      },
      "v139": {
        "name": "v139",
        "offset": 24657920,
        "size": 131072
      },
      "v140": {
        "name": "v140",
        "offset": 25515200,
        "size": 1024
      },
      "v141": {
        "name": "v141",
        "offset": 26684520,
        "size": 1806336
      },
      "v142": {
        "name": "v142",
        "offset": 26483816,
        "size": 200704
      },
      "v143": {
        "name": "v143",
        "offset": 26283112,
        "size": 401408
      },
      "v144": {
        "name": "v144",
        "offset": 22888448,
        "size": 262144
      },
      "v145": {
        "name": "v145",
        "offset": 25526184,
        "size": 256
      },
      "v146": {
        "name": "v146",
        "offset": 25529896,
        "size": 128
      },
      "v147": {
        "name": "v147",
        "offset": 26082408,
        "size": 200704
      },
      "v148": {
        "name": "v148",
        "offset": 25681000,
        "size": 50176
      },
      "v149": {
        "name": "v149",
        "offset": 25530280,
        "size": 64
      },
      "v150": {
        "name": "v150",
        "offset": 25681000,
        "size": 200704
      },
      "v151": {
        "name": "v151",
        "offset": 25681000,
        "size": 200704
      },
      "v152": {
        "name": "v152",
        "offset": 26182760,
        "size": 903168
      },
      "v153": {
        "name": "v153",
        "offset": 25681000,
        "size": 100352
      },
      "v154": {
        "name": "v154",
        "offset": 25681000,
        "size": 50176
      },
      "v155": {
        "name": "v155",
        "offset": 25526440,
        "size": 256
      },
      "v156": {
        "name": "v156",
        "offset": 25781352,
        "size": 903168
      },
      "v157": {
        "name": "v157",
        "offset": 26684520,
        "size": 802816
      },
      "v158": {
        "name": "v158",
        "offset": 25731176,
        "size": 451584
      },
      "v159": {
        "name": "v159",
        "offset": 25516224,
        "size": 1024
      },
      "v160": {
        "name": "v160",
        "offset": 18825216,
        "size": 589824
      },
      "v161": {
        "name": "v161",
        "offset": 25526696,
        "size": 256
      },
      "v162": {
        "name": "v162",
        "offset": 25881704,
        "size": 50176
      },
      "v163": {
        "name": "v163",
        "offset": 25526952,
        "size": 256
      },
      "v164": {
        "name": "v164",
        "offset": 19415040,
        "size": 589824
      },
      "v165": {
        "name": "v165",
        "offset": 25527208,
        "size": 256
      },
      "v166": {
        "name": "v166",
        "offset": 24084480,
        "size": 147456
      },
      "v167": {
        "name": "v167",
        "offset": 25051136,
        "size": 65536
      },
      "v168": {
        "name": "v168",
        "offset": 25527464,
        "size": 256
      },
      "v169": {
        "name": "v169",
        "offset": 26584168,
        "size": 100352
      },
      "v170": {
        "name": "v170",
        "offset": 25681000,
        "size": 100352
      },
      "v171": {
        "name": "v171",
        "offset": 25527720,
        "size": 256
      },
      "v172": {
        "name": "v172",
        "offset": 25116672,
        "size": 65536
      },
      "v173": {
        "name": "v173",
        "offset": 25182208,
        "size": 65536
      },
      "v174": {
        "name": "v174",
        "offset": 23150592,
        "size": 262144
      },
      "v175": {
        "name": "v175",
        "offset": 25523880,
        "size": 512
      },
      "v176": {
        "name": "v176",
        "offset": 25527976,
        "size": 256
      },
      "v177": {
        "name": "v177",
        "offset": 26082408,
        "size": 100352
      },
      "v178": {
        "name": "v178",
        "offset": 26182760,
        "size": 50176
      },
      "v179": {
        "name": "v179",
        "offset": 26182760,
        "size": 903168
      },
      "v180": {
        "name": "v180",
        "offset": 25681000,
        "size": 401408
      },
      "v181": {
        "name": "v181",
        "offset": 25681000,
        "size": 451584
      },
      "v182": {
        "name": "v182",
        "offset": 24231936,
        "size": 147456
      },
      "v183": {
        "name": "v183",
        "offset": 25528232,
        "size": 256
      },
      "v184": {
        "name": "v184",
        "offset": 25681000,
        "size": 200704
      },
      "v185": {
        "name": "v185",
        "offset": 25681000,
        "size": 200704
      },
      "v186": {
        "name": "v186",
        "offset": 26684520,
        "size": 100352
      },
      "v187": {
        "name": "v187",
        "offset": 25528488,
        "size": 256
      },
      "v188": {
        "name": "v188",
        "offset": 25528744,
        "size": 256
      },
      "v189": {
        "name": "v189",
        "offset": 24379392,
        "size": 147456
      },
      "v190": {
        "name": "v190",
        "offset": 25530344,
        "size": 64
      },
      "v191": {
        "name": "v191",
        "offset": 7077888,
        "size": 2097152
      },
      "v192": {
        "name": "v192",
        "offset": 25931880,
        "size": 451584
      },
      "v193": {
        "name": "v193",
        "offset": 25956968,
        "size": 100352
      },
      "v194": {
        "name": "v194",
        "offset": 25681000,
        "size": 903168
      },
      "v195": {
        "name": "v195",
        "offset": 26082408,
        "size": 100352
      },
      "v196": {
        "name": "v196",
        "offset": 25530408,
        "size": 64
      },
      "v197": {
        "name": "v197",
        "offset": 25524392,
        "size": 512
      },
      "v198": {
        "name": "v198",
        "offset": 23412736,
        "size": 262144
      },
      "v199": {
        "name": "v199",
        "offset": 25509056,
        "size": 2048
      },
      "v200": {
        "name": "v200",
        "offset": 23674880,
        "size": 262144
      },
      "v201": {
        "name": "v201",
        "offset": 25517248,
        "size": 1024
      },
      "v202": {
        "name": "v202",
        "offset": 28327784,
        "size": 200704
      },
      "v203": {
        "name": "v203",
        "offset": 26182760,
        "size": 401408
      },
      "v204": {
        "name": "v204",
        "offset": 26584168,
        "size": 100352
      }
    }
  },
  "inputs": [
    "v104"
  ],
  "outputs": [
    "v106"
  ],
  "licenses": {
    "webdnn": "(C) Machine Intelligence Laboratory (The University of Tokyo), MIT License"
  }
}